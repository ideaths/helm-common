# values.yaml

replicaCount: 3

image:
  repository: your-docker-registry.com/yourapp
  tag: "1.0.0"
  pullPolicy: IfNotPresent

imagePullSecrets:
  - name: harbor
nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

configmap:
  create: true
  vars:
    application: "pmh-liquidity-service"
  serverConfigFiles:
    application.yaml: "files/application.yaml"

secret:
  enabled: true
  data:
    db-password: "your-db-password" # Được mã hóa base64 trong Secret.tpl

env:
  enabled: true
  - name: ENVIRONMENT
    value: "production"

livenessProbe:
  enabled: true
  httpGet:
    path: /actuator/health
    port: 8088
  initialDelaySeconds: 60
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2

readinessProbe:
  enabled: true
  httpGet:
    path: /actuator/health
    port: 8088
  initialDelaySeconds: 60
  periodSeconds: 10
  successThreshold: 2
  timeoutSeconds: 2

resources:
  enabled: true
  limits:
    cpu: "500m"
    memory: "512Mi"
  requests:
    cpu: "250m"
    memory: "256Mi"

nodeSelector: {}

tolerations: []

affinity: {}

podAnnotations: {}

podLabels:
  app: pmh-liquidity

hostAliases: {}

podSecurityContext: {}
  # runAsNonRoot: true
  # fsGroup: 1001
  # runAsUser: 1001
  # runAsGroup: 1001

securityContext:
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  privileged: false
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault

# Deployment volumeMounts
volumeMounts:
  create: true
  mountPoint:
    - name: tmp-volume
      mountPath: /tmp
      readOnly: false
    - name: config-volume
      mountPath: /application.yaml
      readOnly: true
      subPath: application.yaml

# Deployment volumes
volumes:
  create: true
  mount:
    - name: tmp-volume
      emptyDir: {}
    - name: config-volume
      configMap:
        defaultMode: 420
        name: pmh-liquidity-service-configmap
        optional: true
        items:
          - key: application.yaml
            path: application.yaml

hpa:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: yourapp.example.com
      path: /
      pathType: Prefix
  tls:
    - hosts:
        - yourapp.example.com
      secretName: yourapp-tls

route:
  enabled: false
  host: yourapp.openshift.example.com
  annotations: {}
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
    key: |
      -----BEGIN PRIVATE KEY-----
      ...
      -----END PRIVATE KEY-----
    certificate: |
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----
    caCertificate: |
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----

istio:
  gateway:
    enabled: true
    selector: istio=ingressgateway
    host: yourapp.example.com
    credentialName: yourapp-tls
  virtualService:
    enabled: true
    host: yourapp.example.com
  destinationRule:
    enabled: true
    trafficPolicy:
      connectionPool:
        tcp:
          maxConnections: 100
        http:
          http1MaxPendingRequests: 100
          http2MaxRequests: 100
      outlierDetection:
        consecutive5xxErrors: 5
        interval: 1m
        baseEjectionTime: 30s
        maxEjectionPercent: 50
  authorizationPolicy:
    enabled: true
    principal: "cluster.local/ns/default/sa/your-service-account"
  peerAuthentication:
    enabled: true
    mtls:
      mode: STRICT

networkPolicy:
  enabled: true
  ingress:
    from:
      - podSelector:
          matchLabels:
            access: "frontend"
  egress:
    to:
      - podSelector:
          matchLabels:
            access: "database"

pdb:
  create: false
  minAvailable: 1

serviceAccount:
  create: false
  annotations: {}
  name: ""

rbac:
  create: false
  role:  
    rules:
      - apiGroups: [""]
        verbs: ["get", "list"]
        resources: ["services"]
